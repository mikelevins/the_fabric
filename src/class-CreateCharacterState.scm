
(module-export
 CreateCharacterState)

(require client)
(require state)
(require state-create-character)

(import (class com.jme3.app.state AbstractAppState AppStateManager))

(define-simple-class CreateCharacterState (FabricClientState)
  ;; slots
  (character-under-construction init: #!null)
  (character-model init: #!null)
  (character-armor init: #!null)
  (character-augment init: #!null)
  (character-weapon init: #!null)
  (armor-model init: #!null)
  (augment-model init: #!null)
  (weapon-model init: #!null)
  (caretakers-button init: #!null)
  (rogues-button init: #!null)
  (abjurers-button init: #!null)
  (faction-nameplate init: #!null)
  (faction-picker init: #!null)
  (armor-picker init: #!null)
  (augment-picker init: #!null)
  (weapon-picker init: #!null)
  (name-generator init: #!null)
  (character-acceptor init: #!null)
  (character-nameplate init: #!null)
  ;; methods
  ((cleanup) (%create-character-state-cleanup (this)))
  ((initialize state-manager::AppStateManager app::FabricClient)
   (begin (invoke-special FabricClientState (this) 'initialize state-manager app)
          (set! app:state (this))
          (%create-character-state-initialize (this))))
  ((isEnabled) (%create-character-state-enabled? (this)))
  ((isInitialized) (%create-character-state-initialized? (this)))
  ((stateAttached state-manager::AppStateManager)
   (%create-character-state-attached (this) state-manager))
  ((stateDetached state-manager::AppStateManager)
   (%create-character-state-detached (this) state-manager))
  ((handleAnalogEvent name value tpf)
   (%create-character-state-handle-analog-event (this) name value tpf))
  ((handleActionEvent name key-pressed? tpf)
   (%create-character-state-handle-action-event (this) name key-pressed? tpf)))
